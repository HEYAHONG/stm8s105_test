                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _Delay
                                     13 	.globl _puts
                                     14 	.globl _sprintf
                                     15 	.globl _printf
                                     16 	.globl _driver_init
                                     17 	.globl _OLED_ShowString
                                     18 	.globl _eeprom_read
                                     19 	.globl _ds1302_read_time
                                     20 	.globl _ReadDHT12
                                     21 	.globl _ReadADC
                                     22 	.globl _GPIO_ReadInputPin
                                     23 	.globl _GPIO_WriteReverse
                                     24 	.globl _GPIO_WriteLow
                                     25 	.globl _GPIO_WriteHigh
                                     26 	.globl _GPIO_Init
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DATA
      000000                         31 _main_count_196608_392:
      000000                         32 	.ds 1
                                     33 ;--------------------------------------------------------
                                     34 ; ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area INITIALIZED
                                     37 ;--------------------------------------------------------
                                     38 ; Stack segment in internal ram 
                                     39 ;--------------------------------------------------------
                                     40 	.area	SSEG
      000000                         41 __start__stack:
      000000                         42 	.ds	1
                                     43 
                                     44 ;--------------------------------------------------------
                                     45 ; absolute external ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area DABS (ABS)
                                     48 
                                     49 ; default segment ordering for linker
                                     50 	.area HOME
                                     51 	.area GSINIT
                                     52 	.area GSFINAL
                                     53 	.area CONST
                                     54 	.area INITIALIZER
                                     55 	.area CODE
                                     56 
                                     57 ;--------------------------------------------------------
                                     58 ; interrupt vector 
                                     59 ;--------------------------------------------------------
                                     60 	.area HOME
      000000                         61 __interrupt_vect:
      000000 82v00u00u00             62 	int s_GSINIT ; reset
      000004 82v00u00u00             63 	int _TRAP_IRQHandler ; trap
      000008 82v00u00u00             64 	int _TLI_IRQHandler ; int0
      00000C 82v00u00u00             65 	int _AWU_IRQHandler ; int1
      000010 82v00u00u00             66 	int _CLK_IRQHandler ; int2
      000014 82v00u00u00             67 	int _EXTI_PORTA_IRQHandler ; int3
      000018 82v00u00u00             68 	int _EXTI_PORTB_IRQHandler ; int4
      00001C 82v00u00u00             69 	int _EXTI_PORTC_IRQHandler ; int5
      000020 82v00u00u00             70 	int _EXTI_PORTD_IRQHandler ; int6
      000024 82v00u00u00             71 	int _EXTI_PORTE_IRQHandler ; int7
      000028 82 00 00 00             72 	int 0x000000 ; int8
      00002C 82 00 00 00             73 	int 0x000000 ; int9
      000030 82v00u00u00             74 	int _SPI_IRQHandler ; int10
      000034 82v00u00u00             75 	int _TIM1_UPD_OVF_TRG_BRK_IRQHandler ; int11
      000038 82v00u00u00             76 	int _TIM1_CAP_COM_IRQHandler ; int12
      00003C 82v00u00u00             77 	int _TIM2_UPD_OVF_BRK_IRQHandler ; int13
      000040 82v00u00u00             78 	int _TIM2_CAP_COM_IRQHandler ; int14
      000044 82 00 00 00             79 	int 0x000000 ; int15
      000048 82 00 00 00             80 	int 0x000000 ; int16
      00004C 82 00 00 00             81 	int 0x000000 ; int17
      000050 82 00 00 00             82 	int 0x000000 ; int18
      000054 82v00u00u00             83 	int _I2C_IRQHandler ; int19
      000058 82v00u00u00             84 	int _UART2_TX_IRQHandler ; int20
      00005C 82v00u00u00             85 	int _UART2_RX_IRQHandler ; int21
      000060 82v00u00u00             86 	int _ADC1_IRQHandler ; int22
      000064 82v00u00u00             87 	int _TIM4_UPD_OVF_IRQHandler ; int23
      000068 82v00u00u00             88 	int _EEPROM_EEC_IRQHandler ; int24
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME
                                     93 	.area GSINIT
                                     94 	.area GSFINAL
                                     95 	.area GSINIT
      000000                         96 __sdcc_gs_init_startup:
      000000                         97 __sdcc_init_data:
                                     98 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   99 	ldw x, #l_DATA
      000003 27 07            [ 1]  100 	jreq	00002$
      000005                        101 00001$:
      000005 72 4FuFFuFF      [ 1]  102 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  103 	decw x
      00000A 26 F9            [ 1]  104 	jrne	00001$
      00000C                        105 00002$:
      00000C AEr00r00         [ 2]  106 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  107 	jreq	00004$
      000011                        108 00003$:
      000011 D6uFFuFF         [ 1]  109 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  110 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  111 	decw	x
      000018 26 F7            [ 1]  112 	jrne	00003$
      00001A                        113 00004$:
                                    114 ; stm8_genXINIT() end
                                    115 ;	main.c: 112: static u8 count=0;
      00001A 72 5Fu00u00      [ 1]  116 	clr	_main_count_196608_392+0
                                    117 	.area GSFINAL
      000000 CCr00r6C         [ 2]  118 	jp	__sdcc_program_startup
                                    119 ;--------------------------------------------------------
                                    120 ; Home
                                    121 ;--------------------------------------------------------
                                    122 	.area HOME
                                    123 	.area HOME
      00006C                        124 __sdcc_program_startup:
      00006C CCr00r0A         [ 2]  125 	jp	_main
                                    126 ;	return from main will return to caller
                                    127 ;--------------------------------------------------------
                                    128 ; code
                                    129 ;--------------------------------------------------------
                                    130 	.area CODE
                                    131 ;	main.c: 51: void Delay(uint16_t nCount)
                                    132 ;	-----------------------------------------
                                    133 ;	 function Delay
                                    134 ;	-----------------------------------------
      000000                        135 _Delay:
                                    136 ;	main.c: 54: while (nCount != 0)
      000000 1E 03            [ 2]  137 	ldw	x, (0x03, sp)
      000002                        138 00101$:
      000002 5D               [ 2]  139 	tnzw	x
      000003 26 01            [ 1]  140 	jrne	00117$
      000005 81               [ 4]  141 	ret
      000006                        142 00117$:
                                    143 ;	main.c: 56: nCount--;
      000006 5A               [ 2]  144 	decw	x
      000007 20 F9            [ 2]  145 	jra	00101$
                                    146 ;	main.c: 58: }
      000009 81               [ 4]  147 	ret
                                    148 ;	main.c: 62: void main(void)
                                    149 ;	-----------------------------------------
                                    150 ;	 function main
                                    151 ;	-----------------------------------------
      00000A                        152 _main:
      00000A 52 4B            [ 2]  153 	sub	sp, #75
                                    154 ;	main.c: 66: GPIO_Init(LED_GPIO_PORT, (GPIO_Pin_TypeDef)LED_GPIO_PINS, GPIO_MODE_OUT_PP_LOW_FAST);
      00000C 4B E0            [ 1]  155 	push	#0xe0
      00000E 4B 20            [ 1]  156 	push	#0x20
      000010 4B 14            [ 1]  157 	push	#0x14
      000012 4B 50            [ 1]  158 	push	#0x50
      000014 CDr00r00         [ 4]  159 	call	_GPIO_Init
      000017 5B 04            [ 2]  160 	addw	sp, #4
                                    161 ;	main.c: 67: GPIO_Init(GPIOF,GPIO_PIN_4, GPIO_MODE_IN_FL_NO_IT);
      000019 4B 00            [ 1]  162 	push	#0x00
      00001B 4B 10            [ 1]  163 	push	#0x10
      00001D 4B 19            [ 1]  164 	push	#0x19
      00001F 4B 50            [ 1]  165 	push	#0x50
      000021 CDr00r00         [ 4]  166 	call	_GPIO_Init
      000024 5B 04            [ 2]  167 	addw	sp, #4
                                    168 ;	main.c: 68: driver_init(); //驱动初始化
      000026 CDr00r00         [ 4]  169 	call	_driver_init
                                    170 ;	main.c: 78: OLED_ShowString(0,0,"STM8 Started!");
      000029 4Br00            [ 1]  171 	push	#<___str_0
      00002B 4Bs00            [ 1]  172 	push	#(___str_0 >> 8)
      00002D 4B 00            [ 1]  173 	push	#0x00
      00002F 4B 00            [ 1]  174 	push	#0x00
      000031 CDr00r00         [ 4]  175 	call	_OLED_ShowString
      000034 5B 04            [ 2]  176 	addw	sp, #4
                                    177 ;	main.c: 79: printf("STM8 Started!\r\n");
      000036 4Br0E            [ 1]  178 	push	#<___str_2
      000038 4Bs00            [ 1]  179 	push	#(___str_2 >> 8)
      00003A CDr00r00         [ 4]  180 	call	_puts
      00003D 5B 02            [ 2]  181 	addw	sp, #2
                                    182 ;	main.c: 81: GPIO_Init(GPIOD, GPIO_PIN_7, GPIO_MODE_OUT_PP_LOW_FAST);
      00003F 4B E0            [ 1]  183 	push	#0xe0
      000041 4B 80            [ 1]  184 	push	#0x80
      000043 4B 0F            [ 1]  185 	push	#0x0f
      000045 4B 50            [ 1]  186 	push	#0x50
      000047 CDr00r00         [ 4]  187 	call	_GPIO_Init
      00004A 5B 04            [ 2]  188 	addw	sp, #4
                                    189 ;	main.c: 82: GPIO_WriteHigh(GPIOD,GPIO_PIN_7);
      00004C 4B 80            [ 1]  190 	push	#0x80
      00004E 4B 0F            [ 1]  191 	push	#0x0f
      000050 4B 50            [ 1]  192 	push	#0x50
      000052 CDr00r00         [ 4]  193 	call	_GPIO_WriteHigh
      000055 5B 03            [ 2]  194 	addw	sp, #3
                                    195 ;	main.c: 83: Delay(0xffff);
      000057 4B FF            [ 1]  196 	push	#0xff
      000059 4B FF            [ 1]  197 	push	#0xff
      00005B CDr00r00         [ 4]  198 	call	_Delay
      00005E 5B 02            [ 2]  199 	addw	sp, #2
                                    200 ;	main.c: 84: GPIO_WriteLow(GPIOD,GPIO_PIN_7);
      000060 4B 80            [ 1]  201 	push	#0x80
      000062 4B 0F            [ 1]  202 	push	#0x0f
      000064 4B 50            [ 1]  203 	push	#0x50
      000066 CDr00r00         [ 4]  204 	call	_GPIO_WriteLow
      000069 5B 03            [ 2]  205 	addw	sp, #3
                                    206 ;	main.c: 88: while (1)
      00006B                        207 00104$:
                                    208 ;	main.c: 92: sprintf(temp,"V:%4d,S:%1d %d",ReadADC(),GPIO_ReadInputPin(GPIOF,GPIO_PIN_4)==RESET?0:1,eeprom_read(10));
      00006B 4B 0A            [ 1]  209 	push	#0x0a
      00006D 5F               [ 1]  210 	clrw	x
      00006E 89               [ 2]  211 	pushw	x
      00006F 4B 00            [ 1]  212 	push	#0x00
      000071 CDr00r00         [ 4]  213 	call	_eeprom_read
      000074 5B 04            [ 2]  214 	addw	sp, #4
      000076 6B 3F            [ 1]  215 	ld	(0x3f, sp), a
      000078 0F 3E            [ 1]  216 	clr	(0x3e, sp)
      00007A 4B 10            [ 1]  217 	push	#0x10
      00007C 4B 19            [ 1]  218 	push	#0x19
      00007E 4B 50            [ 1]  219 	push	#0x50
      000080 CDr00r00         [ 4]  220 	call	_GPIO_ReadInputPin
      000083 5B 03            [ 2]  221 	addw	sp, #3
      000085 4D               [ 1]  222 	tnz	a
      000086 26 05            [ 1]  223 	jrne	00108$
      000088 5F               [ 1]  224 	clrw	x
      000089 1F 2C            [ 2]  225 	ldw	(0x2c, sp), x
      00008B 20 05            [ 2]  226 	jra	00109$
      00008D                        227 00108$:
      00008D AE 00 01         [ 2]  228 	ldw	x, #0x0001
      000090 1F 2C            [ 2]  229 	ldw	(0x2c, sp), x
      000092                        230 00109$:
      000092 CDr00r00         [ 4]  231 	call	_ReadADC
      000095 90 96            [ 1]  232 	ldw	y, sp
      000097 72 A9 00 10      [ 2]  233 	addw	y, #16
      00009B 17 44            [ 2]  234 	ldw	(0x44, sp), y
      00009D 7B 3F            [ 1]  235 	ld	a, (0x3f, sp)
      00009F 88               [ 1]  236 	push	a
      0000A0 7B 3F            [ 1]  237 	ld	a, (0x3f, sp)
      0000A2 88               [ 1]  238 	push	a
      0000A3 7B 2F            [ 1]  239 	ld	a, (0x2f, sp)
      0000A5 88               [ 1]  240 	push	a
      0000A6 7B 2F            [ 1]  241 	ld	a, (0x2f, sp)
      0000A8 88               [ 1]  242 	push	a
      0000A9 89               [ 2]  243 	pushw	x
      0000AA 4Br1D            [ 1]  244 	push	#<___str_3
      0000AC 4Bs00            [ 1]  245 	push	#(___str_3 >> 8)
      0000AE 90 89            [ 2]  246 	pushw	y
      0000B0 CDr00r00         [ 4]  247 	call	_sprintf
      0000B3 5B 0A            [ 2]  248 	addw	sp, #10
                                    249 ;	main.c: 93: printf("%s",temp);
      0000B5 1E 44            [ 2]  250 	ldw	x, (0x44, sp)
      0000B7 89               [ 2]  251 	pushw	x
      0000B8 4Br2C            [ 1]  252 	push	#<___str_4
      0000BA 4Bs00            [ 1]  253 	push	#(___str_4 >> 8)
      0000BC CDr00r00         [ 4]  254 	call	_printf
      0000BF 5B 04            [ 2]  255 	addw	sp, #4
                                    256 ;	main.c: 94: printf("\r\n");
      0000C1 4Br2F            [ 1]  257 	push	#<___str_6
      0000C3 4Bs00            [ 1]  258 	push	#(___str_6 >> 8)
      0000C5 CDr00r00         [ 4]  259 	call	_puts
      0000C8 5B 02            [ 2]  260 	addw	sp, #2
                                    261 ;	main.c: 95: OLED_ShowString(0,2,temp);
      0000CA 1E 44            [ 2]  262 	ldw	x, (0x44, sp)
      0000CC 89               [ 2]  263 	pushw	x
      0000CD 4B 02            [ 1]  264 	push	#0x02
      0000CF 4B 00            [ 1]  265 	push	#0x00
      0000D1 CDr00r00         [ 4]  266 	call	_OLED_ShowString
      0000D4 5B 04            [ 2]  267 	addw	sp, #4
                                    268 ;	main.c: 103: ds1302_read_time(&ds_time);
      0000D6 96               [ 1]  269 	ldw	x, sp
      0000D7 1C 00 09         [ 2]  270 	addw	x, #9
      0000DA 1F 1A            [ 2]  271 	ldw	(0x1a, sp), x
      0000DC 89               [ 2]  272 	pushw	x
      0000DD CDr00r00         [ 4]  273 	call	_ds1302_read_time
      0000E0 5B 02            [ 2]  274 	addw	sp, #2
                                    275 ;	main.c: 104: sprintf(temp,"%2d/%2d/%2d",ds_time.hour/16*10+ds_time.hour%16,ds_time.minute/16*10+ds_time.minute%16,ds_time.second/16*10+ds_time.second%16);
      0000E2 1E 1A            [ 2]  276 	ldw	x, (0x1a, sp)
      0000E4 E6 06            [ 1]  277 	ld	a, (0x6, x)
      0000E6 6B 43            [ 1]  278 	ld	(0x43, sp), a
      0000E8 0F 42            [ 1]  279 	clr	(0x42, sp)
      0000EA 4B 10            [ 1]  280 	push	#0x10
      0000EC 4B 00            [ 1]  281 	push	#0x00
      0000EE 1E 44            [ 2]  282 	ldw	x, (0x44, sp)
      0000F0 89               [ 2]  283 	pushw	x
      0000F1 CDr00r00         [ 4]  284 	call	__divsint
      0000F4 5B 04            [ 2]  285 	addw	sp, #4
      0000F6 89               [ 2]  286 	pushw	x
      0000F7 58               [ 2]  287 	sllw	x
      0000F8 58               [ 2]  288 	sllw	x
      0000F9 72 FB 01         [ 2]  289 	addw	x, (1, sp)
      0000FC 58               [ 2]  290 	sllw	x
      0000FD 5B 02            [ 2]  291 	addw	sp, #2
      0000FF 1F 40            [ 2]  292 	ldw	(0x40, sp), x
      000101 4B 10            [ 1]  293 	push	#0x10
      000103 4B 00            [ 1]  294 	push	#0x00
      000105 1E 44            [ 2]  295 	ldw	x, (0x44, sp)
      000107 89               [ 2]  296 	pushw	x
      000108 CDr00r00         [ 4]  297 	call	__modsint
      00010B 5B 04            [ 2]  298 	addw	sp, #4
      00010D 72 FB 40         [ 2]  299 	addw	x, (0x40, sp)
      000110 1F 2A            [ 2]  300 	ldw	(0x2a, sp), x
      000112 1E 1A            [ 2]  301 	ldw	x, (0x1a, sp)
      000114 E6 05            [ 1]  302 	ld	a, (0x5, x)
      000116 6B 3D            [ 1]  303 	ld	(0x3d, sp), a
      000118 0F 3C            [ 1]  304 	clr	(0x3c, sp)
      00011A 4B 10            [ 1]  305 	push	#0x10
      00011C 4B 00            [ 1]  306 	push	#0x00
      00011E 1E 3E            [ 2]  307 	ldw	x, (0x3e, sp)
      000120 89               [ 2]  308 	pushw	x
      000121 CDr00r00         [ 4]  309 	call	__divsint
      000124 5B 04            [ 2]  310 	addw	sp, #4
      000126 89               [ 2]  311 	pushw	x
      000127 58               [ 2]  312 	sllw	x
      000128 58               [ 2]  313 	sllw	x
      000129 72 FB 01         [ 2]  314 	addw	x, (1, sp)
      00012C 58               [ 2]  315 	sllw	x
      00012D 5B 02            [ 2]  316 	addw	sp, #2
      00012F 1F 3A            [ 2]  317 	ldw	(0x3a, sp), x
      000131 4B 10            [ 1]  318 	push	#0x10
      000133 4B 00            [ 1]  319 	push	#0x00
      000135 1E 3E            [ 2]  320 	ldw	x, (0x3e, sp)
      000137 89               [ 2]  321 	pushw	x
      000138 CDr00r00         [ 4]  322 	call	__modsint
      00013B 5B 04            [ 2]  323 	addw	sp, #4
      00013D 72 FB 3A         [ 2]  324 	addw	x, (0x3a, sp)
      000140 1F 30            [ 2]  325 	ldw	(0x30, sp), x
      000142 1E 1A            [ 2]  326 	ldw	x, (0x1a, sp)
      000144 E6 04            [ 1]  327 	ld	a, (0x4, x)
      000146 6B 2F            [ 1]  328 	ld	(0x2f, sp), a
      000148 0F 2E            [ 1]  329 	clr	(0x2e, sp)
      00014A 4B 10            [ 1]  330 	push	#0x10
      00014C 4B 00            [ 1]  331 	push	#0x00
      00014E 1E 30            [ 2]  332 	ldw	x, (0x30, sp)
      000150 89               [ 2]  333 	pushw	x
      000151 CDr00r00         [ 4]  334 	call	__divsint
      000154 5B 04            [ 2]  335 	addw	sp, #4
      000156 89               [ 2]  336 	pushw	x
      000157 58               [ 2]  337 	sllw	x
      000158 58               [ 2]  338 	sllw	x
      000159 72 FB 01         [ 2]  339 	addw	x, (1, sp)
      00015C 58               [ 2]  340 	sllw	x
      00015D 5B 02            [ 2]  341 	addw	sp, #2
      00015F 1F 34            [ 2]  342 	ldw	(0x34, sp), x
      000161 4B 10            [ 1]  343 	push	#0x10
      000163 4B 00            [ 1]  344 	push	#0x00
      000165 1E 30            [ 2]  345 	ldw	x, (0x30, sp)
      000167 89               [ 2]  346 	pushw	x
      000168 CDr00r00         [ 4]  347 	call	__modsint
      00016B 5B 04            [ 2]  348 	addw	sp, #4
      00016D 72 FB 34         [ 2]  349 	addw	x, (0x34, sp)
      000170 51               [ 1]  350 	exgw	x, y
      000171 96               [ 1]  351 	ldw	x, sp
      000172 1C 00 10         [ 2]  352 	addw	x, #16
      000175 1F 32            [ 2]  353 	ldw	(0x32, sp), x
      000177 7B 2B            [ 1]  354 	ld	a, (0x2b, sp)
      000179 88               [ 1]  355 	push	a
      00017A 7B 2B            [ 1]  356 	ld	a, (0x2b, sp)
      00017C 88               [ 1]  357 	push	a
      00017D 7B 33            [ 1]  358 	ld	a, (0x33, sp)
      00017F 88               [ 1]  359 	push	a
      000180 7B 33            [ 1]  360 	ld	a, (0x33, sp)
      000182 88               [ 1]  361 	push	a
      000183 90 89            [ 2]  362 	pushw	y
      000185 4Br31            [ 1]  363 	push	#<___str_7
      000187 4Bs00            [ 1]  364 	push	#(___str_7 >> 8)
      000189 89               [ 2]  365 	pushw	x
      00018A CDr00r00         [ 4]  366 	call	_sprintf
      00018D 5B 0A            [ 2]  367 	addw	sp, #10
                                    368 ;	main.c: 105: printf("%s",temp);
      00018F 1E 32            [ 2]  369 	ldw	x, (0x32, sp)
      000191 89               [ 2]  370 	pushw	x
      000192 4Br2C            [ 1]  371 	push	#<___str_4
      000194 4Bs00            [ 1]  372 	push	#(___str_4 >> 8)
      000196 CDr00r00         [ 4]  373 	call	_printf
      000199 5B 04            [ 2]  374 	addw	sp, #4
                                    375 ;	main.c: 106: printf("\r\n");
      00019B 4Br2F            [ 1]  376 	push	#<___str_6
      00019D 4Bs00            [ 1]  377 	push	#(___str_6 >> 8)
      00019F CDr00r00         [ 4]  378 	call	_puts
      0001A2 5B 02            [ 2]  379 	addw	sp, #2
                                    380 ;	main.c: 107: OLED_ShowString(0,4,temp);
      0001A4 1E 32            [ 2]  381 	ldw	x, (0x32, sp)
      0001A6 89               [ 2]  382 	pushw	x
      0001A7 4B 04            [ 1]  383 	push	#0x04
      0001A9 4B 00            [ 1]  384 	push	#0x00
      0001AB CDr00r00         [ 4]  385 	call	_OLED_ShowString
      0001AE 5B 04            [ 2]  386 	addw	sp, #4
                                    387 ;	main.c: 114: if(count>=2)
      0001B0 C6u00u00         [ 1]  388 	ld	a, _main_count_196608_392+0
      0001B3 A1 02            [ 1]  389 	cp	a, #0x02
      0001B5 24 03            [ 1]  390 	jrnc	00126$
      0001B7 CCr02r31         [ 2]  391 	jp	00102$
      0001BA                        392 00126$:
                                    393 ;	main.c: 118: ReadDHT12(&data);
      0001BA 90 96            [ 1]  394 	ldw	y, sp
      0001BC 72 A9 00 15      [ 2]  395 	addw	y, #21
      0001C0 93               [ 1]  396 	ldw	x, y
      0001C1 90 89            [ 2]  397 	pushw	y
      0001C3 89               [ 2]  398 	pushw	x
      0001C4 CDr00r00         [ 4]  399 	call	_ReadDHT12
      0001C7 5B 02            [ 2]  400 	addw	sp, #2
      0001C9 90 85            [ 2]  401 	popw	y
                                    402 ;	main.c: 119: sprintf(temp,"%2d.%1dC/%2d.%1d%%/%3d",data.T,data.T1,data.W,data.W1,data.sum);
      0001CB 93               [ 1]  403 	ldw	x, y
      0001CC E6 04            [ 1]  404 	ld	a, (0x4, x)
      0001CE 6B 29            [ 1]  405 	ld	(0x29, sp), a
      0001D0 0F 28            [ 1]  406 	clr	(0x28, sp)
      0001D2 93               [ 1]  407 	ldw	x, y
      0001D3 E6 03            [ 1]  408 	ld	a, (0x3, x)
      0001D5 6B 27            [ 1]  409 	ld	(0x27, sp), a
      0001D7 0F 26            [ 1]  410 	clr	(0x26, sp)
      0001D9 93               [ 1]  411 	ldw	x, y
      0001DA E6 02            [ 1]  412 	ld	a, (0x2, x)
      0001DC 6B 25            [ 1]  413 	ld	(0x25, sp), a
      0001DE 0F 24            [ 1]  414 	clr	(0x24, sp)
      0001E0 93               [ 1]  415 	ldw	x, y
      0001E1 E6 01            [ 1]  416 	ld	a, (0x1, x)
      0001E3 6B 4B            [ 1]  417 	ld	(0x4b, sp), a
      0001E5 0F 4A            [ 1]  418 	clr	(0x4a, sp)
      0001E7 90 F6            [ 1]  419 	ld	a, (y)
      0001E9 0F 48            [ 1]  420 	clr	(0x48, sp)
      0001EB 96               [ 1]  421 	ldw	x, sp
      0001EC 5C               [ 1]  422 	incw	x
      0001ED 1F 46            [ 2]  423 	ldw	(0x46, sp), x
      0001EF 90 93            [ 1]  424 	ldw	y, x
      0001F1 1E 28            [ 2]  425 	ldw	x, (0x28, sp)
      0001F3 89               [ 2]  426 	pushw	x
      0001F4 1E 28            [ 2]  427 	ldw	x, (0x28, sp)
      0001F6 89               [ 2]  428 	pushw	x
      0001F7 1E 28            [ 2]  429 	ldw	x, (0x28, sp)
      0001F9 89               [ 2]  430 	pushw	x
      0001FA 1E 50            [ 2]  431 	ldw	x, (0x50, sp)
      0001FC 89               [ 2]  432 	pushw	x
      0001FD 88               [ 1]  433 	push	a
      0001FE 7B 51            [ 1]  434 	ld	a, (0x51, sp)
      000200 88               [ 1]  435 	push	a
      000201 4Br3D            [ 1]  436 	push	#<___str_9
      000203 4Bs00            [ 1]  437 	push	#(___str_9 >> 8)
      000205 90 89            [ 2]  438 	pushw	y
      000207 CDr00r00         [ 4]  439 	call	_sprintf
      00020A 5B 0E            [ 2]  440 	addw	sp, #14
                                    441 ;	main.c: 120: printf("%s",temp);
      00020C 1E 46            [ 2]  442 	ldw	x, (0x46, sp)
      00020E 89               [ 2]  443 	pushw	x
      00020F 4Br2C            [ 1]  444 	push	#<___str_4
      000211 4Bs00            [ 1]  445 	push	#(___str_4 >> 8)
      000213 CDr00r00         [ 4]  446 	call	_printf
      000216 5B 04            [ 2]  447 	addw	sp, #4
                                    448 ;	main.c: 121: printf("\r\n");
      000218 4Br2F            [ 1]  449 	push	#<___str_6
      00021A 4Bs00            [ 1]  450 	push	#(___str_6 >> 8)
      00021C CDr00r00         [ 4]  451 	call	_puts
      00021F 5B 02            [ 2]  452 	addw	sp, #2
                                    453 ;	main.c: 122: OLED_ShowString(0,6,temp);
      000221 1E 46            [ 2]  454 	ldw	x, (0x46, sp)
      000223 89               [ 2]  455 	pushw	x
      000224 4B 06            [ 1]  456 	push	#0x06
      000226 4B 00            [ 1]  457 	push	#0x00
      000228 CDr00r00         [ 4]  458 	call	_OLED_ShowString
      00022B 5B 04            [ 2]  459 	addw	sp, #4
                                    460 ;	main.c: 123: count=0;
      00022D 72 5Fu00u00      [ 1]  461 	clr	_main_count_196608_392+0
      000231                        462 00102$:
                                    463 ;	main.c: 126: count++;
      000231 72 5Cu00u00      [ 1]  464 	inc	_main_count_196608_392+0
                                    465 ;	main.c: 130: sprintf(temp,"%2d/%2d/%2d/%2d/%2d",keycount[0],keycount[1],keycount[2],keycount[3],keycount[4]);
      000235 90 AEr00r00      [ 2]  466 	ldw	y, #_keycount+0
      000239 93               [ 1]  467 	ldw	x, y
      00023A E6 04            [ 1]  468 	ld	a, (0x4, x)
      00023C 6B 23            [ 1]  469 	ld	(0x23, sp), a
      00023E 0F 22            [ 1]  470 	clr	(0x22, sp)
      000240 93               [ 1]  471 	ldw	x, y
      000241 E6 03            [ 1]  472 	ld	a, (0x3, x)
      000243 6B 21            [ 1]  473 	ld	(0x21, sp), a
      000245 0F 20            [ 1]  474 	clr	(0x20, sp)
      000247 93               [ 1]  475 	ldw	x, y
      000248 E6 02            [ 1]  476 	ld	a, (0x2, x)
      00024A 6B 1F            [ 1]  477 	ld	(0x1f, sp), a
      00024C 0F 1E            [ 1]  478 	clr	(0x1e, sp)
      00024E 93               [ 1]  479 	ldw	x, y
      00024F E6 01            [ 1]  480 	ld	a, (0x1, x)
      000251 6B 1D            [ 1]  481 	ld	(0x1d, sp), a
      000253 0F 1C            [ 1]  482 	clr	(0x1c, sp)
      000255 90 F6            [ 1]  483 	ld	a, (y)
      000257 0F 38            [ 1]  484 	clr	(0x38, sp)
      000259 96               [ 1]  485 	ldw	x, sp
      00025A 1C 00 06         [ 2]  486 	addw	x, #6
      00025D 1F 36            [ 2]  487 	ldw	(0x36, sp), x
      00025F 90 93            [ 1]  488 	ldw	y, x
      000261 1E 22            [ 2]  489 	ldw	x, (0x22, sp)
      000263 89               [ 2]  490 	pushw	x
      000264 1E 22            [ 2]  491 	ldw	x, (0x22, sp)
      000266 89               [ 2]  492 	pushw	x
      000267 1E 22            [ 2]  493 	ldw	x, (0x22, sp)
      000269 89               [ 2]  494 	pushw	x
      00026A 1E 22            [ 2]  495 	ldw	x, (0x22, sp)
      00026C 89               [ 2]  496 	pushw	x
      00026D 88               [ 1]  497 	push	a
      00026E 7B 41            [ 1]  498 	ld	a, (0x41, sp)
      000270 88               [ 1]  499 	push	a
      000271 4Br54            [ 1]  500 	push	#<___str_11
      000273 4Bs00            [ 1]  501 	push	#(___str_11 >> 8)
      000275 90 89            [ 2]  502 	pushw	y
      000277 CDr00r00         [ 4]  503 	call	_sprintf
      00027A 5B 0E            [ 2]  504 	addw	sp, #14
                                    505 ;	main.c: 131: printf("%s",temp);
      00027C 1E 36            [ 2]  506 	ldw	x, (0x36, sp)
      00027E 89               [ 2]  507 	pushw	x
      00027F 4Br2C            [ 1]  508 	push	#<___str_4
      000281 4Bs00            [ 1]  509 	push	#(___str_4 >> 8)
      000283 CDr00r00         [ 4]  510 	call	_printf
      000286 5B 04            [ 2]  511 	addw	sp, #4
                                    512 ;	main.c: 132: printf("\r\n");
      000288 4Br2F            [ 1]  513 	push	#<___str_6
      00028A 4Bs00            [ 1]  514 	push	#(___str_6 >> 8)
      00028C CDr00r00         [ 4]  515 	call	_puts
      00028F 5B 02            [ 2]  516 	addw	sp, #2
                                    517 ;	main.c: 133: OLED_ShowString(0,0,temp);
      000291 1E 36            [ 2]  518 	ldw	x, (0x36, sp)
      000293 89               [ 2]  519 	pushw	x
      000294 4B 00            [ 1]  520 	push	#0x00
      000296 4B 00            [ 1]  521 	push	#0x00
      000298 CDr00r00         [ 4]  522 	call	_OLED_ShowString
      00029B 5B 04            [ 2]  523 	addw	sp, #4
                                    524 ;	main.c: 135: GPIO_WriteReverse(LED_GPIO_PORT, (GPIO_Pin_TypeDef)LED_GPIO_PINS);
      00029D 4B 20            [ 1]  525 	push	#0x20
      00029F 4B 14            [ 1]  526 	push	#0x14
      0002A1 4B 50            [ 1]  527 	push	#0x50
      0002A3 CDr00r00         [ 4]  528 	call	_GPIO_WriteReverse
      0002A6 5B 03            [ 2]  529 	addw	sp, #3
                                    530 ;	main.c: 136: Delay(0xffff);
      0002A8 4B FF            [ 1]  531 	push	#0xff
      0002AA 4B FF            [ 1]  532 	push	#0xff
      0002AC CDr00r00         [ 4]  533 	call	_Delay
      0002AF 5B 02            [ 2]  534 	addw	sp, #2
                                    535 ;	main.c: 139: }
      0002B1 CCr00r6B         [ 2]  536 	jp	00104$
                                    537 	.area CODE
                                    538 	.area CONST
      000000                        539 ___str_0:
      000000 53 54 4D 38 20 53 74   540 	.ascii "STM8 Started!"
             61 72 74 65 64 21
      00000D 00                     541 	.db 0x00
      00000E                        542 ___str_2:
      00000E 53 54 4D 38 20 53 74   543 	.ascii "STM8 Started!"
             61 72 74 65 64 21
      00001B 0D                     544 	.db 0x0d
      00001C 00                     545 	.db 0x00
      00001D                        546 ___str_3:
      00001D 56 3A 25 34 64 2C 53   547 	.ascii "V:%4d,S:%1d %d"
             3A 25 31 64 20 25 64
      00002B 00                     548 	.db 0x00
      00002C                        549 ___str_4:
      00002C 25 73                  550 	.ascii "%s"
      00002E 00                     551 	.db 0x00
      00002F                        552 ___str_6:
      00002F 0D                     553 	.db 0x0d
      000030 00                     554 	.db 0x00
      000031                        555 ___str_7:
      000031 25 32 64 2F 25 32 64   556 	.ascii "%2d/%2d/%2d"
             2F 25 32 64
      00003C 00                     557 	.db 0x00
      00003D                        558 ___str_9:
      00003D 25 32 64 2E 25 31 64   559 	.ascii "%2d.%1dC/%2d.%1d%%/%3d"
             43 2F 25 32 64 2E 25
             31 64 25 25 2F 25 33
             64
      000053 00                     560 	.db 0x00
      000054                        561 ___str_11:
      000054 25 32 64 2F 25 32 64   562 	.ascii "%2d/%2d/%2d/%2d/%2d"
             2F 25 32 64 2F 25 32
             64 2F 25 32 64
      000067 00                     563 	.db 0x00
                                    564 	.area INITIALIZER
                                    565 	.area CABS (ABS)
