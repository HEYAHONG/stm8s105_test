                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _Delay
                                     13 	.globl _puts
                                     14 	.globl _sprintf
                                     15 	.globl _printf
                                     16 	.globl _ReadADC
                                     17 	.globl _key_init
                                     18 	.globl _ReadDHT12
                                     19 	.globl _ds1302_read_time
                                     20 	.globl _ds1302_check
                                     21 	.globl _ds1302_port_init
                                     22 	.globl _ds1302_port_deinit
                                     23 	.globl _ds1302_active
                                     24 	.globl _Init_UART2
                                     25 	.globl _OLED_ShowString
                                     26 	.globl _OLED_Clear
                                     27 	.globl _OLED_Init
                                     28 	.globl _GPIO_ReadInputPin
                                     29 	.globl _GPIO_WriteReverse
                                     30 	.globl _GPIO_WriteLow
                                     31 	.globl _GPIO_WriteHigh
                                     32 	.globl _GPIO_Init
                                     33 ;--------------------------------------------------------
                                     34 ; ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area DATA
      000000                         37 _main_count_196608_390:
      000000                         38 	.ds 1
                                     39 ;--------------------------------------------------------
                                     40 ; ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area INITIALIZED
                                     43 ;--------------------------------------------------------
                                     44 ; Stack segment in internal ram 
                                     45 ;--------------------------------------------------------
                                     46 	.area	SSEG
      000000                         47 __start__stack:
      000000                         48 	.ds	1
                                     49 
                                     50 ;--------------------------------------------------------
                                     51 ; absolute external ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area DABS (ABS)
                                     54 
                                     55 ; default segment ordering for linker
                                     56 	.area HOME
                                     57 	.area GSINIT
                                     58 	.area GSFINAL
                                     59 	.area CONST
                                     60 	.area INITIALIZER
                                     61 	.area CODE
                                     62 
                                     63 ;--------------------------------------------------------
                                     64 ; interrupt vector 
                                     65 ;--------------------------------------------------------
                                     66 	.area HOME
      000000                         67 __interrupt_vect:
      000000 82v00u00u00             68 	int s_GSINIT ; reset
      000004 82v00u00u00             69 	int _TRAP_IRQHandler ; trap
      000008 82v00u00u00             70 	int _TLI_IRQHandler ; int0
      00000C 82v00u00u00             71 	int _AWU_IRQHandler ; int1
      000010 82v00u00u00             72 	int _CLK_IRQHandler ; int2
      000014 82v00u00u00             73 	int _EXTI_PORTA_IRQHandler ; int3
      000018 82v00u00u00             74 	int _EXTI_PORTB_IRQHandler ; int4
      00001C 82v00u00u00             75 	int _EXTI_PORTC_IRQHandler ; int5
      000020 82v00u00u00             76 	int _EXTI_PORTD_IRQHandler ; int6
      000024 82v00u00u00             77 	int _EXTI_PORTE_IRQHandler ; int7
      000028 82 00 00 00             78 	int 0x000000 ; int8
      00002C 82 00 00 00             79 	int 0x000000 ; int9
      000030 82v00u00u00             80 	int _SPI_IRQHandler ; int10
      000034 82v00u00u00             81 	int _TIM1_UPD_OVF_TRG_BRK_IRQHandler ; int11
      000038 82v00u00u00             82 	int _TIM1_CAP_COM_IRQHandler ; int12
      00003C 82v00u00u00             83 	int _TIM2_UPD_OVF_BRK_IRQHandler ; int13
      000040 82v00u00u00             84 	int _TIM2_CAP_COM_IRQHandler ; int14
      000044 82 00 00 00             85 	int 0x000000 ; int15
      000048 82 00 00 00             86 	int 0x000000 ; int16
      00004C 82 00 00 00             87 	int 0x000000 ; int17
      000050 82 00 00 00             88 	int 0x000000 ; int18
      000054 82v00u00u00             89 	int _I2C_IRQHandler ; int19
      000058 82v00u00u00             90 	int _UART2_TX_IRQHandler ; int20
      00005C 82v00u00u00             91 	int _UART2_RX_IRQHandler ; int21
      000060 82v00u00u00             92 	int _ADC1_IRQHandler ; int22
      000064 82v00u00u00             93 	int _TIM4_UPD_OVF_IRQHandler ; int23
      000068 82v00u00u00             94 	int _EEPROM_EEC_IRQHandler ; int24
                                     95 ;--------------------------------------------------------
                                     96 ; global & static initialisations
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME
                                     99 	.area GSINIT
                                    100 	.area GSFINAL
                                    101 	.area GSINIT
      000000                        102 __sdcc_gs_init_startup:
      000000                        103 __sdcc_init_data:
                                    104 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  105 	ldw x, #l_DATA
      000003 27 07            [ 1]  106 	jreq	00002$
      000005                        107 00001$:
      000005 72 4FuFFuFF      [ 1]  108 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  109 	decw x
      00000A 26 F9            [ 1]  110 	jrne	00001$
      00000C                        111 00002$:
      00000C AEr00r00         [ 2]  112 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  113 	jreq	00004$
      000011                        114 00003$:
      000011 D6uFFuFF         [ 1]  115 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  116 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  117 	decw	x
      000018 26 F7            [ 1]  118 	jrne	00003$
      00001A                        119 00004$:
                                    120 ; stm8_genXINIT() end
                                    121 ;	main.c: 107: static u8 count=0;
      00001A 72 5Fu00u00      [ 1]  122 	clr	_main_count_196608_390+0
                                    123 	.area GSFINAL
      000000 CCr00r6C         [ 2]  124 	jp	__sdcc_program_startup
                                    125 ;--------------------------------------------------------
                                    126 ; Home
                                    127 ;--------------------------------------------------------
                                    128 	.area HOME
                                    129 	.area HOME
      00006C                        130 __sdcc_program_startup:
      00006C CCr00r0A         [ 2]  131 	jp	_main
                                    132 ;	return from main will return to caller
                                    133 ;--------------------------------------------------------
                                    134 ; code
                                    135 ;--------------------------------------------------------
                                    136 	.area CODE
                                    137 ;	main.c: 48: void Delay(uint16_t nCount)
                                    138 ;	-----------------------------------------
                                    139 ;	 function Delay
                                    140 ;	-----------------------------------------
      000000                        141 _Delay:
                                    142 ;	main.c: 51: while (nCount != 0)
      000000 1E 03            [ 2]  143 	ldw	x, (0x03, sp)
      000002                        144 00101$:
      000002 5D               [ 2]  145 	tnzw	x
      000003 26 01            [ 1]  146 	jrne	00117$
      000005 81               [ 4]  147 	ret
      000006                        148 00117$:
                                    149 ;	main.c: 53: nCount--;
      000006 5A               [ 2]  150 	decw	x
      000007 20 F9            [ 2]  151 	jra	00101$
                                    152 ;	main.c: 55: }
      000009 81               [ 4]  153 	ret
                                    154 ;	main.c: 59: void main(void)
                                    155 ;	-----------------------------------------
                                    156 ;	 function main
                                    157 ;	-----------------------------------------
      00000A                        158 _main:
      00000A 52 4A            [ 2]  159 	sub	sp, #74
                                    160 ;	main.c: 63: GPIO_Init(LED_GPIO_PORT, (GPIO_Pin_TypeDef)LED_GPIO_PINS, GPIO_MODE_OUT_PP_LOW_FAST);
      00000C 4B E0            [ 1]  161 	push	#0xe0
      00000E 4B 20            [ 1]  162 	push	#0x20
      000010 4B 14            [ 1]  163 	push	#0x14
      000012 4B 50            [ 1]  164 	push	#0x50
      000014 CDr00r00         [ 4]  165 	call	_GPIO_Init
      000017 5B 04            [ 2]  166 	addw	sp, #4
                                    167 ;	main.c: 64: GPIO_Init(GPIOF,GPIO_PIN_4, GPIO_MODE_IN_FL_NO_IT);
      000019 4B 00            [ 1]  168 	push	#0x00
      00001B 4B 10            [ 1]  169 	push	#0x10
      00001D 4B 19            [ 1]  170 	push	#0x19
      00001F 4B 50            [ 1]  171 	push	#0x50
      000021 CDr00r00         [ 4]  172 	call	_GPIO_Init
      000024 5B 04            [ 2]  173 	addw	sp, #4
                                    174 ;	main.c: 66: Init_UART2();
      000026 CDr00r00         [ 4]  175 	call	_Init_UART2
                                    176 ;	main.c: 67: OLED_Init();
      000029 CDr00r00         [ 4]  177 	call	_OLED_Init
                                    178 ;	main.c: 68: ds1302_active();
      00002C CDr00r00         [ 4]  179 	call	_ds1302_active
                                    180 ;	main.c: 69: key_init();
      00002F CDr00r00         [ 4]  181 	call	_key_init
                                    182 ;	main.c: 70: OLED_Clear();
      000032 CDr00r00         [ 4]  183 	call	_OLED_Clear
                                    184 ;	main.c: 71: enableInterrupts(); //使能中断
      000035 9A               [ 1]  185 	rim
                                    186 ;	main.c: 73: OLED_ShowString(0,0,"STM8 Started!");
      000036 4Br00            [ 1]  187 	push	#<___str_0
      000038 4Bs00            [ 1]  188 	push	#(___str_0 >> 8)
      00003A 4B 00            [ 1]  189 	push	#0x00
      00003C 4B 00            [ 1]  190 	push	#0x00
      00003E CDr00r00         [ 4]  191 	call	_OLED_ShowString
      000041 5B 04            [ 2]  192 	addw	sp, #4
                                    193 ;	main.c: 74: printf("STM8 Started!\r\n");
      000043 4Br0E            [ 1]  194 	push	#<___str_2
      000045 4Bs00            [ 1]  195 	push	#(___str_2 >> 8)
      000047 CDr00r00         [ 4]  196 	call	_puts
      00004A 5B 02            [ 2]  197 	addw	sp, #2
                                    198 ;	main.c: 76: GPIO_Init(GPIOD, GPIO_PIN_7, GPIO_MODE_OUT_PP_LOW_FAST);
      00004C 4B E0            [ 1]  199 	push	#0xe0
      00004E 4B 80            [ 1]  200 	push	#0x80
      000050 4B 0F            [ 1]  201 	push	#0x0f
      000052 4B 50            [ 1]  202 	push	#0x50
      000054 CDr00r00         [ 4]  203 	call	_GPIO_Init
      000057 5B 04            [ 2]  204 	addw	sp, #4
                                    205 ;	main.c: 77: GPIO_WriteHigh(GPIOD,GPIO_PIN_7);
      000059 4B 80            [ 1]  206 	push	#0x80
      00005B 4B 0F            [ 1]  207 	push	#0x0f
      00005D 4B 50            [ 1]  208 	push	#0x50
      00005F CDr00r00         [ 4]  209 	call	_GPIO_WriteHigh
      000062 5B 03            [ 2]  210 	addw	sp, #3
                                    211 ;	main.c: 78: Delay(0xffff);
      000064 4B FF            [ 1]  212 	push	#0xff
      000066 4B FF            [ 1]  213 	push	#0xff
      000068 CDr00r00         [ 4]  214 	call	_Delay
      00006B 5B 02            [ 2]  215 	addw	sp, #2
                                    216 ;	main.c: 79: GPIO_WriteLow(GPIOD,GPIO_PIN_7);
      00006D 4B 80            [ 1]  217 	push	#0x80
      00006F 4B 0F            [ 1]  218 	push	#0x0f
      000071 4B 50            [ 1]  219 	push	#0x50
      000073 CDr00r00         [ 4]  220 	call	_GPIO_WriteLow
      000076 5B 03            [ 2]  221 	addw	sp, #3
                                    222 ;	main.c: 83: while (1)
      000078                        223 00106$:
                                    224 ;	main.c: 87: sprintf(temp,"V:%4d,S:%1d",ReadADC(),GPIO_ReadInputPin(GPIOF,GPIO_PIN_4)==RESET?0:1);
      000078 4B 10            [ 1]  225 	push	#0x10
      00007A 4B 19            [ 1]  226 	push	#0x19
      00007C 4B 50            [ 1]  227 	push	#0x50
      00007E CDr00r00         [ 4]  228 	call	_GPIO_ReadInputPin
      000081 5B 03            [ 2]  229 	addw	sp, #3
      000083 4D               [ 1]  230 	tnz	a
      000084 26 05            [ 1]  231 	jrne	00110$
      000086 5F               [ 1]  232 	clrw	x
      000087 1F 1A            [ 2]  233 	ldw	(0x1a, sp), x
      000089 20 05            [ 2]  234 	jra	00111$
      00008B                        235 00110$:
      00008B AE 00 01         [ 2]  236 	ldw	x, #0x0001
      00008E 1F 1A            [ 2]  237 	ldw	(0x1a, sp), x
      000090                        238 00111$:
      000090 CDr00r00         [ 4]  239 	call	_ReadADC
      000093 90 96            [ 1]  240 	ldw	y, sp
      000095 72 A9 00 10      [ 2]  241 	addw	y, #16
      000099 17 32            [ 2]  242 	ldw	(0x32, sp), y
      00009B 7B 1B            [ 1]  243 	ld	a, (0x1b, sp)
      00009D 88               [ 1]  244 	push	a
      00009E 7B 1B            [ 1]  245 	ld	a, (0x1b, sp)
      0000A0 88               [ 1]  246 	push	a
      0000A1 89               [ 2]  247 	pushw	x
      0000A2 4Br1D            [ 1]  248 	push	#<___str_3
      0000A4 4Bs00            [ 1]  249 	push	#(___str_3 >> 8)
      0000A6 90 89            [ 2]  250 	pushw	y
      0000A8 CDr00r00         [ 4]  251 	call	_sprintf
      0000AB 5B 08            [ 2]  252 	addw	sp, #8
                                    253 ;	main.c: 88: printf("%s",temp);
      0000AD 1E 32            [ 2]  254 	ldw	x, (0x32, sp)
      0000AF 89               [ 2]  255 	pushw	x
      0000B0 4Br29            [ 1]  256 	push	#<___str_4
      0000B2 4Bs00            [ 1]  257 	push	#(___str_4 >> 8)
      0000B4 CDr00r00         [ 4]  258 	call	_printf
      0000B7 5B 04            [ 2]  259 	addw	sp, #4
                                    260 ;	main.c: 89: printf("\r\n");
      0000B9 4Br2C            [ 1]  261 	push	#<___str_6
      0000BB 4Bs00            [ 1]  262 	push	#(___str_6 >> 8)
      0000BD CDr00r00         [ 4]  263 	call	_puts
      0000C0 5B 02            [ 2]  264 	addw	sp, #2
                                    265 ;	main.c: 90: OLED_ShowString(0,2,temp);
      0000C2 1E 32            [ 2]  266 	ldw	x, (0x32, sp)
      0000C4 89               [ 2]  267 	pushw	x
      0000C5 4B 02            [ 1]  268 	push	#0x02
      0000C7 4B 00            [ 1]  269 	push	#0x00
      0000C9 CDr00r00         [ 4]  270 	call	_OLED_ShowString
      0000CC 5B 04            [ 2]  271 	addw	sp, #4
                                    272 ;	main.c: 93: ds1302_port_init();
      0000CE CDr00r00         [ 4]  273 	call	_ds1302_port_init
                                    274 ;	main.c: 94: if(ds1302_check())
      0000D1 CDr00r00         [ 4]  275 	call	_ds1302_check
      0000D4 6B 42            [ 1]  276 	ld	(0x42, sp), a
      0000D6 26 03            [ 1]  277 	jrne	00133$
      0000D8 CCr01rB5         [ 2]  278 	jp	00102$
      0000DB                        279 00133$:
                                    280 ;	main.c: 98: ds1302_read_time(&ds_time);
      0000DB 96               [ 1]  281 	ldw	x, sp
      0000DC 1C 00 09         [ 2]  282 	addw	x, #9
      0000DF 1F 26            [ 2]  283 	ldw	(0x26, sp), x
      0000E1 89               [ 2]  284 	pushw	x
      0000E2 CDr00r00         [ 4]  285 	call	_ds1302_read_time
      0000E5 5B 02            [ 2]  286 	addw	sp, #2
                                    287 ;	main.c: 99: sprintf(temp,"%2d/%2d/%2d",ds_time.hour/16*10+ds_time.hour%16,ds_time.minute/16*10+ds_time.minute%16,ds_time.second/16*10+ds_time.second%16);
      0000E7 1E 26            [ 2]  288 	ldw	x, (0x26, sp)
      0000E9 E6 06            [ 1]  289 	ld	a, (0x6, x)
      0000EB 6B 41            [ 1]  290 	ld	(0x41, sp), a
      0000ED 0F 40            [ 1]  291 	clr	(0x40, sp)
      0000EF 4B 10            [ 1]  292 	push	#0x10
      0000F1 4B 00            [ 1]  293 	push	#0x00
      0000F3 1E 42            [ 2]  294 	ldw	x, (0x42, sp)
      0000F5 89               [ 2]  295 	pushw	x
      0000F6 CDr00r00         [ 4]  296 	call	__divsint
      0000F9 5B 04            [ 2]  297 	addw	sp, #4
      0000FB 89               [ 2]  298 	pushw	x
      0000FC 58               [ 2]  299 	sllw	x
      0000FD 58               [ 2]  300 	sllw	x
      0000FE 72 FB 01         [ 2]  301 	addw	x, (1, sp)
      000101 58               [ 2]  302 	sllw	x
      000102 5B 02            [ 2]  303 	addw	sp, #2
      000104 1F 3E            [ 2]  304 	ldw	(0x3e, sp), x
      000106 4B 10            [ 1]  305 	push	#0x10
      000108 4B 00            [ 1]  306 	push	#0x00
      00010A 1E 42            [ 2]  307 	ldw	x, (0x42, sp)
      00010C 89               [ 2]  308 	pushw	x
      00010D CDr00r00         [ 4]  309 	call	__modsint
      000110 5B 04            [ 2]  310 	addw	sp, #4
      000112 72 FB 3E         [ 2]  311 	addw	x, (0x3e, sp)
      000115 1F 1E            [ 2]  312 	ldw	(0x1e, sp), x
      000117 1E 26            [ 2]  313 	ldw	x, (0x26, sp)
      000119 E6 05            [ 1]  314 	ld	a, (0x5, x)
      00011B 6B 1D            [ 1]  315 	ld	(0x1d, sp), a
      00011D 0F 1C            [ 1]  316 	clr	(0x1c, sp)
      00011F 4B 10            [ 1]  317 	push	#0x10
      000121 4B 00            [ 1]  318 	push	#0x00
      000123 1E 1E            [ 2]  319 	ldw	x, (0x1e, sp)
      000125 89               [ 2]  320 	pushw	x
      000126 CDr00r00         [ 4]  321 	call	__divsint
      000129 5B 04            [ 2]  322 	addw	sp, #4
      00012B 89               [ 2]  323 	pushw	x
      00012C 58               [ 2]  324 	sllw	x
      00012D 58               [ 2]  325 	sllw	x
      00012E 72 FB 01         [ 2]  326 	addw	x, (1, sp)
      000131 58               [ 2]  327 	sllw	x
      000132 5B 02            [ 2]  328 	addw	sp, #2
      000134 1F 30            [ 2]  329 	ldw	(0x30, sp), x
      000136 4B 10            [ 1]  330 	push	#0x10
      000138 4B 00            [ 1]  331 	push	#0x00
      00013A 1E 1E            [ 2]  332 	ldw	x, (0x1e, sp)
      00013C 89               [ 2]  333 	pushw	x
      00013D CDr00r00         [ 4]  334 	call	__modsint
      000140 5B 04            [ 2]  335 	addw	sp, #4
      000142 72 FB 30         [ 2]  336 	addw	x, (0x30, sp)
      000145 1F 2E            [ 2]  337 	ldw	(0x2e, sp), x
      000147 1E 26            [ 2]  338 	ldw	x, (0x26, sp)
      000149 E6 04            [ 1]  339 	ld	a, (0x4, x)
      00014B 6B 25            [ 1]  340 	ld	(0x25, sp), a
      00014D 0F 24            [ 1]  341 	clr	(0x24, sp)
      00014F 4B 10            [ 1]  342 	push	#0x10
      000151 4B 00            [ 1]  343 	push	#0x00
      000153 1E 26            [ 2]  344 	ldw	x, (0x26, sp)
      000155 89               [ 2]  345 	pushw	x
      000156 CDr00r00         [ 4]  346 	call	__divsint
      000159 5B 04            [ 2]  347 	addw	sp, #4
      00015B 89               [ 2]  348 	pushw	x
      00015C 58               [ 2]  349 	sllw	x
      00015D 58               [ 2]  350 	sllw	x
      00015E 72 FB 01         [ 2]  351 	addw	x, (1, sp)
      000161 58               [ 2]  352 	sllw	x
      000162 5B 02            [ 2]  353 	addw	sp, #2
      000164 1F 22            [ 2]  354 	ldw	(0x22, sp), x
      000166 4B 10            [ 1]  355 	push	#0x10
      000168 4B 00            [ 1]  356 	push	#0x00
      00016A 1E 26            [ 2]  357 	ldw	x, (0x26, sp)
      00016C 89               [ 2]  358 	pushw	x
      00016D CDr00r00         [ 4]  359 	call	__modsint
      000170 5B 04            [ 2]  360 	addw	sp, #4
      000172 72 FB 22         [ 2]  361 	addw	x, (0x22, sp)
      000175 51               [ 1]  362 	exgw	x, y
      000176 96               [ 1]  363 	ldw	x, sp
      000177 1C 00 10         [ 2]  364 	addw	x, #16
      00017A 1F 20            [ 2]  365 	ldw	(0x20, sp), x
      00017C 7B 1F            [ 1]  366 	ld	a, (0x1f, sp)
      00017E 88               [ 1]  367 	push	a
      00017F 7B 1F            [ 1]  368 	ld	a, (0x1f, sp)
      000181 88               [ 1]  369 	push	a
      000182 7B 31            [ 1]  370 	ld	a, (0x31, sp)
      000184 88               [ 1]  371 	push	a
      000185 7B 31            [ 1]  372 	ld	a, (0x31, sp)
      000187 88               [ 1]  373 	push	a
      000188 90 89            [ 2]  374 	pushw	y
      00018A 4Br2E            [ 1]  375 	push	#<___str_7
      00018C 4Bs00            [ 1]  376 	push	#(___str_7 >> 8)
      00018E 89               [ 2]  377 	pushw	x
      00018F CDr00r00         [ 4]  378 	call	_sprintf
      000192 5B 0A            [ 2]  379 	addw	sp, #10
                                    380 ;	main.c: 100: printf("%s",temp);
      000194 1E 20            [ 2]  381 	ldw	x, (0x20, sp)
      000196 89               [ 2]  382 	pushw	x
      000197 4Br29            [ 1]  383 	push	#<___str_4
      000199 4Bs00            [ 1]  384 	push	#(___str_4 >> 8)
      00019B CDr00r00         [ 4]  385 	call	_printf
      00019E 5B 04            [ 2]  386 	addw	sp, #4
                                    387 ;	main.c: 101: printf("\r\n");
      0001A0 4Br2C            [ 1]  388 	push	#<___str_6
      0001A2 4Bs00            [ 1]  389 	push	#(___str_6 >> 8)
      0001A4 CDr00r00         [ 4]  390 	call	_puts
      0001A7 5B 02            [ 2]  391 	addw	sp, #2
                                    392 ;	main.c: 102: OLED_ShowString(0,4,temp);
      0001A9 1E 20            [ 2]  393 	ldw	x, (0x20, sp)
      0001AB 89               [ 2]  394 	pushw	x
      0001AC 4B 04            [ 1]  395 	push	#0x04
      0001AE 4B 00            [ 1]  396 	push	#0x00
      0001B0 CDr00r00         [ 4]  397 	call	_OLED_ShowString
      0001B3 5B 04            [ 2]  398 	addw	sp, #4
      0001B5                        399 00102$:
                                    400 ;	main.c: 104: ds1302_port_deinit();
      0001B5 CDr00r00         [ 4]  401 	call	_ds1302_port_deinit
                                    402 ;	main.c: 109: if(count>=2)
      0001B8 C6u00u00         [ 1]  403 	ld	a, _main_count_196608_390+0
      0001BB A1 02            [ 1]  404 	cp	a, #0x02
      0001BD 24 03            [ 1]  405 	jrnc	00134$
      0001BF CCr02r39         [ 2]  406 	jp	00104$
      0001C2                        407 00134$:
                                    408 ;	main.c: 113: ReadDHT12(&data);
      0001C2 90 96            [ 1]  409 	ldw	y, sp
      0001C4 72 A9 00 15      [ 2]  410 	addw	y, #21
      0001C8 93               [ 1]  411 	ldw	x, y
      0001C9 90 89            [ 2]  412 	pushw	y
      0001CB 89               [ 2]  413 	pushw	x
      0001CC CDr00r00         [ 4]  414 	call	_ReadDHT12
      0001CF 5B 02            [ 2]  415 	addw	sp, #2
      0001D1 90 85            [ 2]  416 	popw	y
                                    417 ;	main.c: 114: sprintf(temp,"%2d.%1dC/%2d.%1d%%/%3d",data.T,data.T1,data.W,data.W1,data.sum);
      0001D3 93               [ 1]  418 	ldw	x, y
      0001D4 E6 04            [ 1]  419 	ld	a, (0x4, x)
      0001D6 6B 2D            [ 1]  420 	ld	(0x2d, sp), a
      0001D8 0F 2C            [ 1]  421 	clr	(0x2c, sp)
      0001DA 93               [ 1]  422 	ldw	x, y
      0001DB E6 03            [ 1]  423 	ld	a, (0x3, x)
      0001DD 6B 2B            [ 1]  424 	ld	(0x2b, sp), a
      0001DF 0F 2A            [ 1]  425 	clr	(0x2a, sp)
      0001E1 93               [ 1]  426 	ldw	x, y
      0001E2 E6 02            [ 1]  427 	ld	a, (0x2, x)
      0001E4 6B 29            [ 1]  428 	ld	(0x29, sp), a
      0001E6 0F 28            [ 1]  429 	clr	(0x28, sp)
      0001E8 93               [ 1]  430 	ldw	x, y
      0001E9 E6 01            [ 1]  431 	ld	a, (0x1, x)
      0001EB 6B 3D            [ 1]  432 	ld	(0x3d, sp), a
      0001ED 0F 3C            [ 1]  433 	clr	(0x3c, sp)
      0001EF 90 F6            [ 1]  434 	ld	a, (y)
      0001F1 0F 3A            [ 1]  435 	clr	(0x3a, sp)
      0001F3 96               [ 1]  436 	ldw	x, sp
      0001F4 5C               [ 1]  437 	incw	x
      0001F5 1F 38            [ 2]  438 	ldw	(0x38, sp), x
      0001F7 90 93            [ 1]  439 	ldw	y, x
      0001F9 1E 2C            [ 2]  440 	ldw	x, (0x2c, sp)
      0001FB 89               [ 2]  441 	pushw	x
      0001FC 1E 2C            [ 2]  442 	ldw	x, (0x2c, sp)
      0001FE 89               [ 2]  443 	pushw	x
      0001FF 1E 2C            [ 2]  444 	ldw	x, (0x2c, sp)
      000201 89               [ 2]  445 	pushw	x
      000202 1E 42            [ 2]  446 	ldw	x, (0x42, sp)
      000204 89               [ 2]  447 	pushw	x
      000205 88               [ 1]  448 	push	a
      000206 7B 43            [ 1]  449 	ld	a, (0x43, sp)
      000208 88               [ 1]  450 	push	a
      000209 4Br3A            [ 1]  451 	push	#<___str_9
      00020B 4Bs00            [ 1]  452 	push	#(___str_9 >> 8)
      00020D 90 89            [ 2]  453 	pushw	y
      00020F CDr00r00         [ 4]  454 	call	_sprintf
      000212 5B 0E            [ 2]  455 	addw	sp, #14
                                    456 ;	main.c: 115: printf("%s",temp);
      000214 1E 38            [ 2]  457 	ldw	x, (0x38, sp)
      000216 89               [ 2]  458 	pushw	x
      000217 4Br29            [ 1]  459 	push	#<___str_4
      000219 4Bs00            [ 1]  460 	push	#(___str_4 >> 8)
      00021B CDr00r00         [ 4]  461 	call	_printf
      00021E 5B 04            [ 2]  462 	addw	sp, #4
                                    463 ;	main.c: 116: printf("\r\n");
      000220 4Br2C            [ 1]  464 	push	#<___str_6
      000222 4Bs00            [ 1]  465 	push	#(___str_6 >> 8)
      000224 CDr00r00         [ 4]  466 	call	_puts
      000227 5B 02            [ 2]  467 	addw	sp, #2
                                    468 ;	main.c: 117: OLED_ShowString(0,6,temp);
      000229 1E 38            [ 2]  469 	ldw	x, (0x38, sp)
      00022B 89               [ 2]  470 	pushw	x
      00022C 4B 06            [ 1]  471 	push	#0x06
      00022E 4B 00            [ 1]  472 	push	#0x00
      000230 CDr00r00         [ 4]  473 	call	_OLED_ShowString
      000233 5B 04            [ 2]  474 	addw	sp, #4
                                    475 ;	main.c: 118: count=0;
      000235 72 5Fu00u00      [ 1]  476 	clr	_main_count_196608_390+0
      000239                        477 00104$:
                                    478 ;	main.c: 121: count++;
      000239 72 5Cu00u00      [ 1]  479 	inc	_main_count_196608_390+0
                                    480 ;	main.c: 125: sprintf(temp,"%2d/%2d/%2d/%2d/%2d",keycount[0],keycount[1],keycount[2],keycount[3],keycount[4]);
      00023D 90 AEr00r00      [ 2]  481 	ldw	y, #_keycount+0
      000241 93               [ 1]  482 	ldw	x, y
      000242 E6 04            [ 1]  483 	ld	a, (0x4, x)
      000244 6B 37            [ 1]  484 	ld	(0x37, sp), a
      000246 0F 36            [ 1]  485 	clr	(0x36, sp)
      000248 93               [ 1]  486 	ldw	x, y
      000249 E6 03            [ 1]  487 	ld	a, (0x3, x)
      00024B 6B 35            [ 1]  488 	ld	(0x35, sp), a
      00024D 0F 34            [ 1]  489 	clr	(0x34, sp)
      00024F 93               [ 1]  490 	ldw	x, y
      000250 E6 02            [ 1]  491 	ld	a, (0x2, x)
      000252 6B 4A            [ 1]  492 	ld	(0x4a, sp), a
      000254 0F 49            [ 1]  493 	clr	(0x49, sp)
      000256 93               [ 1]  494 	ldw	x, y
      000257 E6 01            [ 1]  495 	ld	a, (0x1, x)
      000259 6B 48            [ 1]  496 	ld	(0x48, sp), a
      00025B 0F 47            [ 1]  497 	clr	(0x47, sp)
      00025D 90 F6            [ 1]  498 	ld	a, (y)
      00025F 0F 45            [ 1]  499 	clr	(0x45, sp)
      000261 96               [ 1]  500 	ldw	x, sp
      000262 1C 00 06         [ 2]  501 	addw	x, #6
      000265 1F 43            [ 2]  502 	ldw	(0x43, sp), x
      000267 90 93            [ 1]  503 	ldw	y, x
      000269 1E 36            [ 2]  504 	ldw	x, (0x36, sp)
      00026B 89               [ 2]  505 	pushw	x
      00026C 1E 36            [ 2]  506 	ldw	x, (0x36, sp)
      00026E 89               [ 2]  507 	pushw	x
      00026F 1E 4D            [ 2]  508 	ldw	x, (0x4d, sp)
      000271 89               [ 2]  509 	pushw	x
      000272 1E 4D            [ 2]  510 	ldw	x, (0x4d, sp)
      000274 89               [ 2]  511 	pushw	x
      000275 88               [ 1]  512 	push	a
      000276 7B 4E            [ 1]  513 	ld	a, (0x4e, sp)
      000278 88               [ 1]  514 	push	a
      000279 4Br51            [ 1]  515 	push	#<___str_11
      00027B 4Bs00            [ 1]  516 	push	#(___str_11 >> 8)
      00027D 90 89            [ 2]  517 	pushw	y
      00027F CDr00r00         [ 4]  518 	call	_sprintf
      000282 5B 0E            [ 2]  519 	addw	sp, #14
                                    520 ;	main.c: 126: printf("%s",temp);
      000284 1E 43            [ 2]  521 	ldw	x, (0x43, sp)
      000286 89               [ 2]  522 	pushw	x
      000287 4Br29            [ 1]  523 	push	#<___str_4
      000289 4Bs00            [ 1]  524 	push	#(___str_4 >> 8)
      00028B CDr00r00         [ 4]  525 	call	_printf
      00028E 5B 04            [ 2]  526 	addw	sp, #4
                                    527 ;	main.c: 127: printf("\r\n");
      000290 4Br2C            [ 1]  528 	push	#<___str_6
      000292 4Bs00            [ 1]  529 	push	#(___str_6 >> 8)
      000294 CDr00r00         [ 4]  530 	call	_puts
      000297 5B 02            [ 2]  531 	addw	sp, #2
                                    532 ;	main.c: 128: OLED_ShowString(0,0,temp);
      000299 1E 43            [ 2]  533 	ldw	x, (0x43, sp)
      00029B 89               [ 2]  534 	pushw	x
      00029C 4B 00            [ 1]  535 	push	#0x00
      00029E 4B 00            [ 1]  536 	push	#0x00
      0002A0 CDr00r00         [ 4]  537 	call	_OLED_ShowString
      0002A3 5B 04            [ 2]  538 	addw	sp, #4
                                    539 ;	main.c: 130: GPIO_WriteReverse(LED_GPIO_PORT, (GPIO_Pin_TypeDef)LED_GPIO_PINS);
      0002A5 4B 20            [ 1]  540 	push	#0x20
      0002A7 4B 14            [ 1]  541 	push	#0x14
      0002A9 4B 50            [ 1]  542 	push	#0x50
      0002AB CDr00r00         [ 4]  543 	call	_GPIO_WriteReverse
      0002AE 5B 03            [ 2]  544 	addw	sp, #3
                                    545 ;	main.c: 131: Delay(0xffff);
      0002B0 4B FF            [ 1]  546 	push	#0xff
      0002B2 4B FF            [ 1]  547 	push	#0xff
      0002B4 CDr00r00         [ 4]  548 	call	_Delay
      0002B7 5B 02            [ 2]  549 	addw	sp, #2
                                    550 ;	main.c: 134: }
      0002B9 CCr00r78         [ 2]  551 	jp	00106$
                                    552 	.area CODE
                                    553 	.area CONST
      000000                        554 ___str_0:
      000000 53 54 4D 38 20 53 74   555 	.ascii "STM8 Started!"
             61 72 74 65 64 21
      00000D 00                     556 	.db 0x00
      00000E                        557 ___str_2:
      00000E 53 54 4D 38 20 53 74   558 	.ascii "STM8 Started!"
             61 72 74 65 64 21
      00001B 0D                     559 	.db 0x0d
      00001C 00                     560 	.db 0x00
      00001D                        561 ___str_3:
      00001D 56 3A 25 34 64 2C 53   562 	.ascii "V:%4d,S:%1d"
             3A 25 31 64
      000028 00                     563 	.db 0x00
      000029                        564 ___str_4:
      000029 25 73                  565 	.ascii "%s"
      00002B 00                     566 	.db 0x00
      00002C                        567 ___str_6:
      00002C 0D                     568 	.db 0x0d
      00002D 00                     569 	.db 0x00
      00002E                        570 ___str_7:
      00002E 25 32 64 2F 25 32 64   571 	.ascii "%2d/%2d/%2d"
             2F 25 32 64
      000039 00                     572 	.db 0x00
      00003A                        573 ___str_9:
      00003A 25 32 64 2E 25 31 64   574 	.ascii "%2d.%1dC/%2d.%1d%%/%3d"
             43 2F 25 32 64 2E 25
             31 64 25 25 2F 25 33
             64
      000050 00                     575 	.db 0x00
      000051                        576 ___str_11:
      000051 25 32 64 2F 25 32 64   577 	.ascii "%2d/%2d/%2d/%2d/%2d"
             2F 25 32 64 2F 25 32
             64 2F 25 32 64
      000064 00                     578 	.db 0x00
                                    579 	.area INITIALIZER
                                    580 	.area CABS (ABS)
