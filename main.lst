                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _Delay
                                     13 	.globl _puts
                                     14 	.globl _sprintf
                                     15 	.globl _printf
                                     16 	.globl _ReadADC
                                     17 	.globl _Init_UART2
                                     18 	.globl _OLED_ShowString
                                     19 	.globl _OLED_Clear
                                     20 	.globl _OLED_Init
                                     21 	.globl _GPIO_WriteReverse
                                     22 	.globl _GPIO_Init
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area DATA
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area INITIALIZED
                                     31 ;--------------------------------------------------------
                                     32 ; Stack segment in internal ram 
                                     33 ;--------------------------------------------------------
                                     34 	.area	SSEG
      000000                         35 __start__stack:
      000000                         36 	.ds	1
                                     37 
                                     38 ;--------------------------------------------------------
                                     39 ; absolute external ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area DABS (ABS)
                                     42 
                                     43 ; default segment ordering for linker
                                     44 	.area HOME
                                     45 	.area GSINIT
                                     46 	.area GSFINAL
                                     47 	.area CONST
                                     48 	.area INITIALIZER
                                     49 	.area CODE
                                     50 
                                     51 ;--------------------------------------------------------
                                     52 ; interrupt vector 
                                     53 ;--------------------------------------------------------
                                     54 	.area HOME
      000000                         55 __interrupt_vect:
      000000 82v00u00u00             56 	int s_GSINIT ; reset
                                     57 ;--------------------------------------------------------
                                     58 ; global & static initialisations
                                     59 ;--------------------------------------------------------
                                     60 	.area HOME
                                     61 	.area GSINIT
                                     62 	.area GSFINAL
                                     63 	.area GSINIT
      000000                         64 __sdcc_gs_init_startup:
      000000                         65 __sdcc_init_data:
                                     66 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   67 	ldw x, #l_DATA
      000003 27 07            [ 1]   68 	jreq	00002$
      000005                         69 00001$:
      000005 72 4FuFFuFF      [ 1]   70 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   71 	decw x
      00000A 26 F9            [ 1]   72 	jrne	00001$
      00000C                         73 00002$:
      00000C AEr00r00         [ 2]   74 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   75 	jreq	00004$
      000011                         76 00003$:
      000011 D6uFFuFF         [ 1]   77 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   78 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   79 	decw	x
      000018 26 F7            [ 1]   80 	jrne	00003$
      00001A                         81 00004$:
                                     82 ; stm8_genXINIT() end
                                     83 	.area GSFINAL
      000000 CCr00r04         [ 2]   84 	jp	__sdcc_program_startup
                                     85 ;--------------------------------------------------------
                                     86 ; Home
                                     87 ;--------------------------------------------------------
                                     88 	.area HOME
                                     89 	.area HOME
      000004                         90 __sdcc_program_startup:
      000004 CCr00r0A         [ 2]   91 	jp	_main
                                     92 ;	return from main will return to caller
                                     93 ;--------------------------------------------------------
                                     94 ; code
                                     95 ;--------------------------------------------------------
                                     96 	.area CODE
                                     97 ;	main.c: 44: void Delay(uint16_t nCount)
                                     98 ;	-----------------------------------------
                                     99 ;	 function Delay
                                    100 ;	-----------------------------------------
      000000                        101 _Delay:
                                    102 ;	main.c: 47: while (nCount != 0)
      000000 1E 03            [ 2]  103 	ldw	x, (0x03, sp)
      000002                        104 00101$:
      000002 5D               [ 2]  105 	tnzw	x
      000003 26 01            [ 1]  106 	jrne	00117$
      000005 81               [ 4]  107 	ret
      000006                        108 00117$:
                                    109 ;	main.c: 49: nCount--;
      000006 5A               [ 2]  110 	decw	x
      000007 20 F9            [ 2]  111 	jra	00101$
                                    112 ;	main.c: 51: }
      000009 81               [ 4]  113 	ret
                                    114 ;	main.c: 55: void main(void)
                                    115 ;	-----------------------------------------
                                    116 ;	 function main
                                    117 ;	-----------------------------------------
      00000A                        118 _main:
      00000A 52 0C            [ 2]  119 	sub	sp, #12
                                    120 ;	main.c: 59: GPIO_Init(LED_GPIO_PORT, (GPIO_Pin_TypeDef)LED_GPIO_PINS, GPIO_MODE_OUT_PP_LOW_FAST);
      00000C 4B E0            [ 1]  121 	push	#0xe0
      00000E 4B 20            [ 1]  122 	push	#0x20
      000010 4B 14            [ 1]  123 	push	#0x14
      000012 4B 50            [ 1]  124 	push	#0x50
      000014 CDr00r00         [ 4]  125 	call	_GPIO_Init
      000017 5B 04            [ 2]  126 	addw	sp, #4
                                    127 ;	main.c: 61: Init_UART2();
      000019 CDr00r00         [ 4]  128 	call	_Init_UART2
                                    129 ;	main.c: 62: OLED_Init();
      00001C CDr00r00         [ 4]  130 	call	_OLED_Init
                                    131 ;	main.c: 63: OLED_Clear();
      00001F CDr00r00         [ 4]  132 	call	_OLED_Clear
                                    133 ;	main.c: 64: enableInterrupts(); //使能中断
      000022 9A               [ 1]  134 	rim
                                    135 ;	main.c: 66: OLED_ShowString(0,0,"STM8 Started!");
      000023 4Br00            [ 1]  136 	push	#<___str_0
      000025 4Bs00            [ 1]  137 	push	#(___str_0 >> 8)
      000027 4B 00            [ 1]  138 	push	#0x00
      000029 4B 00            [ 1]  139 	push	#0x00
      00002B CDr00r00         [ 4]  140 	call	_OLED_ShowString
      00002E 5B 04            [ 2]  141 	addw	sp, #4
                                    142 ;	main.c: 67: printf("STM8 Started!\r\n");
      000030 4Br0E            [ 1]  143 	push	#<___str_2
      000032 4Bs00            [ 1]  144 	push	#(___str_2 >> 8)
      000034 CDr00r00         [ 4]  145 	call	_puts
      000037 5B 02            [ 2]  146 	addw	sp, #2
                                    147 ;	main.c: 69: while (1)
      000039                        148 00102$:
                                    149 ;	main.c: 73: sprintf(temp,"%4d",ReadADC());
      000039 CDr00r00         [ 4]  150 	call	_ReadADC
      00003C 90 96            [ 1]  151 	ldw	y, sp
      00003E 90 5C            [ 1]  152 	incw	y
      000040 17 0B            [ 2]  153 	ldw	(0x0b, sp), y
      000042 89               [ 2]  154 	pushw	x
      000043 4Br1D            [ 1]  155 	push	#<___str_3
      000045 4Bs00            [ 1]  156 	push	#(___str_3 >> 8)
      000047 90 89            [ 2]  157 	pushw	y
      000049 CDr00r00         [ 4]  158 	call	_sprintf
      00004C 5B 06            [ 2]  159 	addw	sp, #6
                                    160 ;	main.c: 74: printf("%s",temp);
      00004E 1E 0B            [ 2]  161 	ldw	x, (0x0b, sp)
      000050 89               [ 2]  162 	pushw	x
      000051 4Br21            [ 1]  163 	push	#<___str_4
      000053 4Bs00            [ 1]  164 	push	#(___str_4 >> 8)
      000055 CDr00r00         [ 4]  165 	call	_printf
      000058 5B 04            [ 2]  166 	addw	sp, #4
                                    167 ;	main.c: 75: OLED_ShowString(0,2,temp);
      00005A 1E 0B            [ 2]  168 	ldw	x, (0x0b, sp)
      00005C 89               [ 2]  169 	pushw	x
      00005D 4B 02            [ 1]  170 	push	#0x02
      00005F 4B 00            [ 1]  171 	push	#0x00
      000061 CDr00r00         [ 4]  172 	call	_OLED_ShowString
      000064 5B 04            [ 2]  173 	addw	sp, #4
                                    174 ;	main.c: 76: GPIO_WriteReverse(LED_GPIO_PORT, (GPIO_Pin_TypeDef)LED_GPIO_PINS);
      000066 4B 20            [ 1]  175 	push	#0x20
      000068 4B 14            [ 1]  176 	push	#0x14
      00006A 4B 50            [ 1]  177 	push	#0x50
      00006C CDr00r00         [ 4]  178 	call	_GPIO_WriteReverse
      00006F 5B 03            [ 2]  179 	addw	sp, #3
                                    180 ;	main.c: 77: Delay(0xffff);
      000071 4B FF            [ 1]  181 	push	#0xff
      000073 4B FF            [ 1]  182 	push	#0xff
      000075 CDr00r00         [ 4]  183 	call	_Delay
      000078 5B 02            [ 2]  184 	addw	sp, #2
      00007A 20 BD            [ 2]  185 	jra	00102$
                                    186 ;	main.c: 80: }
      00007C 5B 0C            [ 2]  187 	addw	sp, #12
      00007E 81               [ 4]  188 	ret
                                    189 	.area CODE
                                    190 	.area CONST
      000000                        191 ___str_0:
      000000 53 54 4D 38 20 53 74   192 	.ascii "STM8 Started!"
             61 72 74 65 64 21
      00000D 00                     193 	.db 0x00
      00000E                        194 ___str_2:
      00000E 53 54 4D 38 20 53 74   195 	.ascii "STM8 Started!"
             61 72 74 65 64 21
      00001B 0D                     196 	.db 0x0d
      00001C 00                     197 	.db 0x00
      00001D                        198 ___str_3:
      00001D 25 34 64               199 	.ascii "%4d"
      000020 00                     200 	.db 0x00
      000021                        201 ___str_4:
      000021 25 73                  202 	.ascii "%s"
      000023 00                     203 	.db 0x00
                                    204 	.area INITIALIZER
                                    205 	.area CABS (ABS)
